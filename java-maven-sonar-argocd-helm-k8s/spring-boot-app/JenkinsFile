pipeline {
    agent any

    environment {
        SONAR_URL = "http://18.171.59.253:9000"
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "AishwaryaKhonde"
        DOCKER_AGENT_IMAGE = "aishkhonde/maven-aishwarya-docker-agent:v1"
        DOCKER_IMAGE = "aishkhonde/ultimate-cicd-pipeline:${BUILD_NUMBER}"
    }

    stages {
        stage('Build and Push Agent Image') {
            environment {
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh '''
                    echo "Building custom agent image..."
                    docker build -t ${DOCKER_AGENT_IMAGE} -f java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile .
                    
                    echo "Logging in to Docker Hub..."
                    echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

                    echo "Pushing agent image..."
                    docker push ${DOCKER_AGENT_IMAGE}
                    '''
                }
            }
        }

        stage('Run Pipeline with Custom Agent') {
            agent {
                docker {
                    image "${DOCKER_AGENT_IMAGE}"
                    args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }

            stages {
                stage('Checkout') {
                    steps {
                        sh 'echo "Checkout stage passed"'
                        // git branch: 'main', url: 'https://github.com/AishwaryaKhonde/Jenkins-Zero-To-Hero.git'
                    }
                }
                stage('Build and Test') {
                    steps {
                        sh 'ls -ltr'
                        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                    }
                }
                stage('Static Code Analysis') {
                    steps {
                        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                            sh '''
                            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                            '''
                        }
                    }
                }
                stage('Build and Push Application Image') {
                    environment {
                        REGISTRY_CREDENTIALS = credentials('docker-cred')
                    }
                    steps {
                        script {
                            sh '''
                            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                            docker build -t ${DOCKER_IMAGE} .
                            '''
                            def dockerImage = docker.image("${DOCKER_IMAGE}")
                            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                                dockerImage.push()
                            }
                        }
                    }
                }
                stage('Update Deployment File') {
                    steps {
                        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                            sh '''
                            git config --global user.email "aishwaryakhonde@gmail.com"
                            git config --global user.name "AishwaryaKhonde"
                            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                            '''
                        }
                    }
                }
            }
        }
    }
}
